name: WorkSafetyCore CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PHP_VERSION_DEFAULT: '8.1'

jobs:
  validation:
    name: Code Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION_DEFAULT }}
        extensions: mbstring, intl, pdo_sqlite, pdo_mysql
        tools: composer:v2

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Check PHP syntax
      run: find src tests -name "*.php" -print0 | xargs -0 -n1 php -l

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validation

    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.1', '8.2']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, intl, pdo_sqlite, pdo_mysql, xdebug
        coverage: xdebug  # Ensure Xdebug is enabled for code coverage
        tools: composer:v2

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-versions }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-versions }}-
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --dev

    - name: Create storage directories
      run: |
        mkdir -p storage/logs storage/cache storage/uploads storage/downloads
        chmod -R 755 storage/

    - name: Prepare test environment
      run: |
        if [ -f .env.example ]; then
          cp .env.example .env.test
        else
          echo "APP_ENV=testing" > .env.test
        fi
        echo "DB_CONNECTION=sqlite" >> .env.test
        echo "DB_DATABASE=\":memory:\"" >> .env.test  # Ensure proper escaping of special characters

    - name: Debug .env.test
      run: cat .env.test

    - name: Run test suite
      run: vendor/bin/phpunit --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      if: matrix.php-versions == env.PHP_VERSION_DEFAULT
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        token: "${{ secrets.CODECOV_TOKEN }}"
        fail_ci_if_error: true
        verbose: true

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION_DEFAULT }}
        extensions: mbstring, intl, pdo_sqlite
        tools: composer:v2

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-static-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-static-
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Check code style
      run: |
        if [ -f .php-cs-fixer.php ]; then
          vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
        else
          echo "Skipping PHP CS Fixer - no configuration found"
        fi

    - name: Debug vendor/bin
      run: ls -la vendor/bin

    - name: Run static analysis
      run: |
        if [ -f phpstan.neon ] || [ -f phpstan.neon.dist ]; then
          vendor/bin/phpstan analyse --no-progress
        else
          echo "Skipping PHPStan - no configuration found"
        fi

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION_DEFAULT }}
        tools: composer:v2

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security check for known vulnerabilities
      run: |
        composer audit || echo "Security audit completed with warnings"

    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential secrets..."
        ! grep -r --include="*.php" --include="*.js" --include="*.yml" \
          -E "(password|secret|key|token).*=.*['\"]\w{8,}" \
          src/ public/ config/ || echo "Potential secrets found - review manually"

  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [tests, static-analysis, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION_DEFAULT }}
        tools: composer:v2

    - name: Install production dependencies
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

    - name: Check production readiness
      run: |
        echo "Checking production configuration..."
        php -r "
        if (!file_exists('.env.example')) {
          echo 'Warning: .env.example not found\n';
          exit(1);
        }
        if (!is_dir('storage')) {
          echo 'Error: storage directory not found\n';
          exit(1);
        }
        echo 'Production readiness check passed\n';
        "

    - name: Test health endpoint
      run: |
        php -S localhost:8000 -t public/ &
        SERVER_PID=$!
        sleep 2

        if curl -f http://localhost:8000/health-ci.php; then
          echo "Health endpoint test passed"
        else
          echo "Health endpoint test failed"
          exit 1
        fi

        kill $SERVER_PID

  debug-secrets:
    name: Debug Secrets
    runs-on: ubuntu-latest
    needs: validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug Secrets
      run: echo "Secrets loaded successfully"
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Debug Codecov Token
      run: |
        echo "Codecov Token: $CODECOV_TOKEN"
      env:
        CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
